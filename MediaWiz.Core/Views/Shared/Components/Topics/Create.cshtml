@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage
@using Umbraco.Cms.Core.Models.PublishedContent
@using Umbraco.Cms.Core.Security
@using Umbraco.Cms.Core.Services
@using Umbraco.Cms.Core.Models
@using Umbraco.Extensions
@inject IMemberManager _memberManager
@inject IMemberGroupService MemberGroupService
@inject IIdKeyMap keyMap

@{ var create = Context.Request.Query["create"];

    if (Model.Value<bool>("postAtRoot") && MemberCanPost(Model))
    {
        @await Component.InvokeAsync("Posts", new { Template = "PostForm", Model, ShowTitle = true })

    }
}

@functions { 
    public bool MemberCanPost(IPublishedContent item)
    {
        if (!_memberManager.IsLoggedIn())
            return false;

        var canPostGroups = item.Value<string>("canPostGroups");

        // default(blank list) is anyone can post
        if (string.IsNullOrWhiteSpace(canPostGroups))
            return true;

        // is the user a member of a group
        // is the user in any of those groups ?
        var allowedGroupList = new List<string>();
        foreach (var memberGroupStr in canPostGroups.Split(','))
        {
            var key = keyMap.GetKeyForId(Convert.ToInt32(memberGroupStr),UmbracoObjectTypes.MemberGroup).Result;
            var memberGroup = MemberGroupService.GetAsync(key).Result;
            if (memberGroup != null)
            {
                allowedGroupList.Add(memberGroup.Name);
            }
        }
        return _memberManager.IsMemberAuthorizedAsync(allowGroups: allowedGroupList).Result;
    }

}