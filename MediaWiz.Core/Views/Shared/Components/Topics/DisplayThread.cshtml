@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage
@using Umbraco.Cms.Core.Models.PublishedContent
@using Umbraco.Cms.Core.Services
@using Umbraco.Extensions
@using ContentModels = Umbraco.Cms.Web.Common.PublishedModels
@using MediaWiz.Forums.Extensions
@using Microsoft.AspNetCore.Mvc.TagHelpers

@{

    int parentId = Model.Parent.Id;
    var parentPage = Umbraco.Content(parentId);

    if (parentPage.IsDocumentType("ForumPost"))
    {
        // if this post has a parent post, that's the page we
        // want people to see (the full thread)
        Context.Response.Redirect(parentPage.Url());
        return;
    }
    if (!string.IsNullOrWhiteSpace(Context.Request.Query["edit"]))
    {
        @await Component.InvokeAsync("Posts", new {Template="PostForm",Model,ShowTitle = true})
        return;

    }

    bool showTitle = parentPage.IsDocumentType("Forum");
    bool TopicIslocked = !Model.Value<bool>("allowReplies");
    
    var sortdir = Context.Request.Query["sortdir"];
    var isSolved = Model.Value<bool>("answer");
    var items = Model.Children().Where(x => x.IsDocumentType("Forumpost") && !x.Value<bool>("postType"));
    var publishedContents = items as IPublishedContent[] ?? items.ToArray();

    int pageSize = Convert.ToInt32(Model.Value<decimal>("intPageSize"));
    int.TryParse(Context.Request.Query["page"], out var pagenum);
    var totalPages = (int)Math.Ceiling((double)publishedContents.Count() / (double)pageSize);

    ViewBag.Page = pagenum;
    ViewBag.TotalPages = totalPages;

}


<ul class="forums wiz-replies">
    <li class="wiz-header color_dark bold">
        <div class="row">
            <div class="col-9">
                @if (showTitle)
                {
                    <h4 id="@Model.Id" class="color_dark">
                        <label for="thread-sort">@Model.Value("postTitle")</label>
                    </h4>
                }
            </div>
            <div class="col-3">
                
                &nbsp;

            </div>
        </div>

    </li>
    <li class="wiz-body">
        <ul>
            @{
                //DisplayPost(Model);
                @await Component.InvokeAsync("Posts",new {Template = "DisplayPost",Model = Model,showTitle = true})

                var replies = publishedContents.OrderBy(x => x.CreateDate);
                @if (replies.Count() > 1)
                {
                    <li class="wiz-body">
                        <div class="row">
                            <div class="col-9">
                                &nbsp;
                            </div>
                            <div class="col-3">

                                <select class="form-select" name="Sortby" id="thread-sort">
                                    @if (sortdir != "DESC")
                                    {
                                        <option value="DESC">@Umbraco.GetDictionaryValueOrDefault("Forums.Sort.Newest", "Newest First")</option>
                                        <option value="ASC" selected="selected">@Umbraco.GetDictionaryValueOrDefault("Forums.Sort.Oldest", "Oldest First")</option>
                                    }
                                    else
                                    {
                                        <option value="DESC" selected="selected">@Umbraco.GetDictionaryValueOrDefault("Forums.Sort.Newest", "")Newest First</option>
                                        <option value="ASC">@Umbraco.GetDictionaryValueOrDefault("Forums.Sort.Oldest", "Oldest First")</option>
                                    }

                                </select>

                            </div>
                        </div>

                    </li>
                }
                if (!String.IsNullOrWhiteSpace(sortdir))
                {
                    if (sortdir == "DESC")
                    {
                        replies = replies.OrderByDescending(x => x.CreateDate);// publishedContents.OrderByDescending(x => x.CreateDate);
                    }
                }
                foreach (var reply in replies.Skip((pagenum - 1) * pageSize).Take(pageSize))
                {
                    @await Component.InvokeAsync("Posts",new {Template = "DisplayPost",Model = reply, showTitle = false})
                }
            }
        </ul>
    </li>

</ul>
@if (totalPages > 1)
{
    @await Component.InvokeAsync("Navigation",new {Template = "PagerView", Model = Model})
}
@* // if the forum and post are active, show the reply box.  *@
@if (DoesForumAcceptPosts(parentPage) && !TopicIslocked)
{
    @await Component.InvokeAsync("Posts", new {Template="PostForm",Model,ShowTitle = false})

}

@functions {
    public bool DoesForumAcceptPosts(IPublishedContent item)
    {
        // does recursing up get false?
        if (item.Value<bool>("isActive") == false)
        {
            return false;
        }

        // thing is this forum may be active, but a parent forum may be off...
        if (item.Parent != null && item.Parent.IsDocumentType("Forum"))
        {
            // so if parent is forum go up to it
            return DoesForumAcceptPosts(item.Parent);
        }

        // here.. we have reached the top and not found a false (forum off)
        // so it must be on...
        return true;
    }

}
