@model MediaWiz.Forums.ViewModels.ProfileViewModel

@using Umbraco.Cms.Web.Website.Controllers
@using Umbraco.Extensions
@using Microsoft.AspNetCore.Mvc.TagHelpers
@using Umbraco.Cms.Core.Services
@using MediaWiz.Forums.Extensions
@using Umbraco.Cms.Web.Common

@inject UmbracoHelper umbracoHelper
@{

    var success = TempData["FormSuccess"] != null;

    if (Model.CurrentUser == null)
    {
        Context.Response.Redirect("/forums");
    }
}

@if (Model.ProfileModel != null && Model.Username == Model.CurrentUser?.UserName || Model.Username.IsNullOrWhiteSpace())
{
    if (success)
    {
        @* This message will show if profileModel.RedirectUrl is not defined (default) *@
        <p class="text-success">@umbracoHelper.GetDictionaryValueOrDefault("Forums.Profile.Updated","Profile updated")</p>
    }
    <nav>
        <div class="nav nav-tabs" id="nav-tab" role="tablist">
            <button class="nav-link" id="nav-profile-tab" data-bs-toggle="tab" data-bs-target="#nav-profile" type="button" role="tab" aria-controls="nav-profile" aria-selected="false">@umbracoHelper.GetDictionaryValueOrDefault("Forums.Profile","Profile")</button>
            <button class="nav-link" id="nav-files-tab" data-bs-toggle="tab" data-bs-target="#nav-files" data-id="@Model.CurrentUser?.Id" type="button" role="tab" aria-controls="nav-files" aria-selected="false">@umbracoHelper.GetDictionaryValueOrDefault("Forums.Profile.Files","Files")</button>
        </div>
    </nav>
    <div class="tab-content" id="nav-tabContent">
        <div class="tab-pane fade show active" id="nav-profile" role="tabpanel" aria-labelledby="nav-profile-tab">
            @using (Html.BeginUmbracoForm<UmbProfileController>
                ("HandleUpdateProfile", new { RedirectUrl = Model.ProfileModel?.RedirectUrl }))
                {
                <hr />
                @if (!string.IsNullOrWhiteSpace(Model.ProfileModel.UserName))
                {
                    <div class="mb-3">
                        <label asp-for="@Model.ProfileModel.UserName" class="form-label"></label>
                        <input asp-for="@Model.ProfileModel.UserName" class="form-control" readonly="" />
                        <span asp-validation-for="@Model.ProfileModel.UserName" class="form-text text-danger"></span>
                    </div>
                }
                <div asp-validation-summary="All" class="text-danger"></div>
                <div class="mb-3">
                    <label asp-for="@Model.ProfileModel.Name" class="form-label"></label>
                    <input asp-for="@Model.ProfileModel.Name" class="form-control" aria-required="true" />
                    <span asp-validation-for="@Model.ProfileModel.Name" class="form-text text-danger"></span>
                </div>
                <div class="mb-3">
                    <label asp-for="@Model.ProfileModel.Email" class="form-label"></label>
                    <input asp-for="@Model.ProfileModel.Email" class="form-control" autocomplete="username" aria-required="true" />
                    <span asp-validation-for="@Model.ProfileModel.Email" class="form-text text-danger"></span>
                </div>




                @if (Model.ProfileModel.MemberProperties != null)
                {
                    for (var i = 0; i < Model.ProfileModel.MemberProperties.Count; i++)
                    {
                        if (Model.ProfileModel.MemberProperties[i].Alias == "receiveNotifications")
                        {
                            var checkstate = Model.ProfileModel.MemberProperties[i].Value == "1" ? "checked" : "";
                            <div class="mb-3">
                                <div class="form-check form-switch">
                                    <input class="form-check-input" type="checkbox" id="flexSwitchCheckDefault" value="@Model.ProfileModel.MemberProperties[i].Value" @checkstate>
                                    <label class="form-check-label" for="flexSwitchCheckDefault">@Html.LabelFor(m => Model.ProfileModel.MemberProperties[i].Value, Model.ProfileModel.MemberProperties[i].Name)</label>
                                </div>

                                <span asp-validation-for="@Model.ProfileModel.MemberProperties[i].Value" class="form-text text-danger"></span>
                                <div id="notifyHelp" class="form-text">
                                    @umbracoHelper.GetDictionaryValueOrDefault("Forums.Profile.NotifyHelp","Receive an email when someone posts on the forum.")
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="mb-3">
                                @Html.LabelFor(m => Model.ProfileModel.MemberProperties[i].Value, Model.ProfileModel.MemberProperties[i].Name)
                                <input asp-for="@Model.ProfileModel.MemberProperties[i].Value" class="form-control" />
                                @Html.HiddenFor(m => Model.ProfileModel.MemberProperties[i].Alias)
                                <span asp-validation-for="@Model.ProfileModel.MemberProperties[i].Value" class="form-text text-danger"></span>
                            </div>
                        }

                    }
                }

                <button type="submit" class="btn btn-dark">@umbracoHelper.GetDictionaryValueOrDefault("Forums.Update","Update")</button>

                }
            <hr class="mt-3"/>
                @await Component.InvokeAsync("PasswordManager",new {Template = "ChangePassword"})
        </div>
        <div class="tab-pane fade" id="nav-files" role="tabpanel" aria-labelledby="nav-files-tab" data-id="@Model.CurrentUser?.Id">
            <p><label>@umbracoHelper.GetDictionaryValueOrDefault("Forums.Profile.Nofiles","No files uploaded") </label></p>
        </div>
    </div>

}
