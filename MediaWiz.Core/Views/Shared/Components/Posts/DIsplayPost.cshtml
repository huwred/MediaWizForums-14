@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage<Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent>

@using Umbraco.Cms.Core.Models
@using Umbraco.Cms.Core.Models.PublishedContent
@using MediaWiz.Forums.Helpers
@using MediaWiz.Forums.Interfaces
@using Umbraco.Cms.Core.Services
@using Umbraco.Extensions
@using MediaWiz.Forums.Extensions
@inject Umbraco.Cms.Core.Security.IMemberManager _memberManager
@inject IForumCacheService _cacheService
@{
    bool TopicIslocked = !Model.Value<bool>("allowReplies");
    var post = Model;
    var forum = post;
    if(post.Parent.ContentType.Alias == "forum"){
        forum = post.Parent;
    }else if (post.Parent.Parent.ContentType.Alias == "forum"){
        forum = post.Parent.Parent;
    }
    bool isApproved = !forum.Value<bool>("requireApproval") || post.Value<bool>("approved");
    var topicClass = post.Value<bool>("postType") ? "topic" : "reply";
    if (TopicIslocked)
    {
        topicClass += " locked";
    }
    var solved = string.Empty;
    if (post.Value<bool>("answer") && !post.Value<bool>("postType"))
    {
        solved = "solution";
    }
    IList<string> roles = new List<string>();
    var user = _memberManager.GetCurrentMemberAsync().Result;
    if (user != null)
    {
        roles = _memberManager.GetRolesAsync(user).Result;
    }


    <li class="@topicClass mt-3 rounded-3" style="overflow: auto">

        @if ((post.IsVisible() && isApproved) || roles.Contains("ForumAdministrator") || roles.Contains("ForumMederator") || (user.Id == post.Value<IPublishedContent>("postAuthor").Id.ToString()))
        {
            var alertwarning = "";
            var author = post.Value<IPublishedContent>("postAuthor");
            if (!post.IsVisible())
            {
                alertwarning = "alert-warning";
            }
            if (!isApproved)
            {
                alertwarning = "notapproved";
            }
            <div class="@topicClass @solved @alertwarning" style="overflow: auto">

                <div class="d-flex wiz-reply-content" id="content_@post.Id" style="overflow: auto;">
                            <div class="w-2 flex-md-column p-2">
                        <a href="/profile/?user=@post.Value("postCreator")" title="View @post.Value("postCreator")'s profile" class="wiz-author-link">
                            <span>
                                @{
                                    DisplayAvatar(author);
                                }
                            </span>
                        </a>

                        <div class="wiz-author-role">
                            @{
                                DisplayRole(author);
                            }
                        </div>
                    </div>
                    <div class="flex-grow-1">
                        <div id="post_@post.Id" class="wiz-reply-header @solved @alertwarning">

                            <span class="wiz-topic-meta ">
                                <span class="wiz-author-name mr-3">@post.Value("postCreator")</span>
                                @if (author != null)
                                {
                                    <span>@author.Value("postCount") posts</span>
                                }
                                <span class="wiz-reply-post-date" title="@post.CreateDate">@post.CreateDate.ToString("MMM dd, yyyy @ HH:mm")</span>
                                @if (post.Value<DateTime>("editDate").ToLocalTime() > post.CreateDate.AddSeconds(10))
                                {
                                    var edited = post.Value<DateTime>("editDate");
                                    <span class="text-danger" title="@edited.ToLocalTime()">- last edited @edited.ToLocalTime().GetRelativeDate()</span>
                                }

                            </span>
                        </div>
                        <div id="postcontent_@post.Id" class="p-3">
                            @post.Value("postBody")
                        </div>
                        <div class="align-self-bottom" style="overflow: auto">
                            <ul class="wiz-admin-links list-inline" style="white-space: nowrap;">
                                @{
                                    DisplayPostTools(post);
                                }
                                @if (isApproved)
                                {
                                    <li class="list-inline-item"><a href="#post_@post.Id" title="@Umbraco.GetDictionaryValueOrDefault("Forums.Posts.Link.Title","Direct link to post")"><i class="fs-5 bi-link-45deg"></i><span class="tool-label" style="display: none;">@Umbraco.GetDictionaryValueOrDefault("Forums.Posts.Link.Text","Copy link")</span></a> </li>               
                                }
                            </ul>
                        </div>
                    </div>
                </div>
            </div>

        }
        else if (roles.Contains("ForumAdministrator") || roles.Contains("ForumMederator"))
        {

                // hidden posts are deleted
            <div class="wiz-reply-header post-deleted">
                @if (post.Value<bool>("deletedByAuthor"))
                {
                    <div class="alert alert-warning">@Umbraco.GetDictionaryValueOrDefault("Forums.Posts.Deleted","post deleted by author")</div>
                }
                else
                {
                    <div class="alert alert-warning">@Umbraco.GetDictionaryValueOrDefault("Forum.Posts.Removed","post has been removed")</div>

                }
            </div>
        }
    </li>
}
@{
    void DisplayAvatar(IPublishedContent author)
    {
        int authorId = author?.Id ?? -1;
        if (authorId > 0)
        {
            var memberById = _memberManager.FindByIdAsync(authorId.ToString()).Result;
            <img width="40" height="40" src="@ForumHelper.GravatarURL(memberById.Email)" class="avatar rounded-circle" alt="author's Avatar" />

        }
        else
        {
            <img width="40" height="40" src="@ForumHelper.GravatarURL("")" class="avatar rounded-circle" alt="author's Avatar" />
        }
    }

    void DisplayRole(IPublishedContent author)
    {
        int authorId = author?.Id ?? -1;

        if (authorId > 0)
        {
            var memberById = _memberManager.FindByIdAsync(authorId.ToString()).Result;
            if (author != null)
            {
                var roles = _memberManager.GetRolesAsync(memberById).Result;
                foreach (var role in roles)
                {
                    if (role == "ForumAdministrator")
                    {
                        <p>Admin</p>
                    }
                }
            }
        }

    }

    void DisplayPostTools(IPublishedContent post)
    {
        var isLoggedIn = Context.User?.Identity?.IsAuthenticated ?? false;
        var lastpostDate = post.CreateDate;

        if (!isLoggedIn)
        {
            return;
        }
        int authorId = post.Value<IPublishedContent>("postAuthor")?.Id ?? -1;
        IList<string> roles = new List<string>();
        var user = _memberManager.GetCurrentMemberAsync().Result;
        if (user != null)
        {
            roles = _memberManager.GetRolesAsync(user).Result;
        }
        if ((TopicIslocked || user == null) && !roles.Contains("ForumAdministrator"))
        {
            return;
        }
        if (TopicIslocked && !roles.Contains("ForumAdministrator"))
        {
            return;
        }
        var isSolved = Model.Value<bool>("answer");
        if (!Model.Value<bool>("postType")) //must be a reply so check the topic hasn't been marked as resolved
        {
            isSolved = Model.Parent.Value<bool>("answer");
            var cacheInfo = _cacheService.GetPost(post, "Topic_" + Model.Parent.Id);
            lastpostDate = cacheInfo.latestPost;
        }
        if (user != null)
        {
            var memberById = _memberManager.FindByIdAsync(user.Id).Result;
            IPublishedContent member = _memberManager.AsPublishedMember(memberById);
            @if (isApproved)
            {
                <li class="list-inline-item">
                    <a class="post-quote" data-postid="@post.Id" title="@Umbraco.GetDictionaryValueOrDefault("Forums.Posts.QuoteLink.Title","Reply with Quote")" href="#">
                        <i class="fs-5 bi-chat-quote" aria-hidden="true"></i> <span class="tool-label" style="display: none;">@Umbraco.GetDictionaryValueOrDefault("Forums.Posts.QuoteLink.Text","Quote")</span>
                    </a>
                </li>                
            }

            @if (!post.Value<bool>("postType") && !isSolved && isApproved)
            {
                <li class="list-inline-item">
                    <a href="#" class="post-answer" data-postid="@post.Id" title="@Umbraco.GetDictionaryValueOrDefault("Forums.Posts.SolutionLink.Title","Mark as solution")">
                        <i class="fs-5 bi-check-circle" aria-hidden="true"></i> <span class="tool-label" style="display: none;">@Umbraco.GetDictionaryValueOrDefault("Forums.Posts.SolutionLink.Text","Mark as solution")</span>
                    </a>
                </li>
            }
            if ((member.Id == authorId) || roles.Contains("ForumAdministrator") || roles.Contains("ForumMederator"))
            {
                @if (post.CreateDate >= lastpostDate || roles.Contains("ForumAdministrator"))
                {
                    <li class="list-inline-item">
                        <a class="post-delete" data-postid="@post.Id" title="@Umbraco.GetDictionaryValueOrDefault("Forums.Posts.DeleteLink.Title","Delete Post")" href="#">
                            <i class="fs-5 bi-trash" aria-hidden="true"></i> <span class="tool-label" style="display: none;">@Umbraco.GetDictionaryValueOrDefault("Forums.Posts.DeleteLink.Text","Delete")</span>
                        </a>
                    </li>
                    <li class="list-inline-item">
                        <a href="#" class="post-edit" data-postid="@post.Id" data-bs-toggle="modal" data-bs-target="#editPostModal" title="@Umbraco.GetDictionaryValueOrDefault("Forums.Posts.EditLink.Title","Edit Post")">
                            <i class="fs-5 bi-pencil" aria-hidden="true"></i> <span class="tool-label" style="display: none;">@Umbraco.GetDictionaryValueOrDefault("Forums.Posts.EditLink.Text","Edit")</span>
                        </a>
                    </li>
                }

                @if (post.Value<bool>("postType") && (roles.Contains("ForumAdministrator") || roles.Contains("ForumModerator")))
                {
                    <li class="list-inline-item">
                        <a class="post-lock" data-postid="@post.Id" href="#" rel="nofollow" title="@Umbraco.GetDictionaryValueOrDefault("Forums.Posts.LockUnlock","Lock/Unlock Post")">
                            @if (TopicIslocked)
                            {
                                <i class="fs-5 bi-unlock " aria-hidden="true"></i> <span class="tool-label" style="display: none;">@Umbraco.GetDictionaryValueOrDefault("Forums.Posts.Unlock","Unlock")</span>
                            }
                            else
                            {
                                <i class="fs-5 bi-lock" aria-hidden="true"></i> <span class="tool-label" style="display: none;">@Umbraco.GetDictionaryValueOrDefault("Forums.Posts.Lock","Lock")</span>
                            }
                        </a>
                    </li>


                }
                @if ((roles.Contains("ForumAdministrator") || roles.Contains("ForumModerator")))
                {

                    @if (!post.Value<bool>("approved"))
                    {
                        <li class="list-inline-item">
                            <a class="post-approve" data-postid="@post.Id" href="#" rel="nofollow" title="@Umbraco.GetDictionaryValueOrDefault("Forums.Posts.Approve","Approve Post")">
                                <i class="fs-5 bi-file-check" aria-hidden="true"></i> <span class="tool-label" style="display: none;">@Umbraco.GetDictionaryValueOrDefault("Forums.Posts.Approve", "Approve Post")</span>
                            </a>
                        </li>
                    }

                }
            }
        }
    }
}